using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Media.Imaging;
using System.Windows.Input;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.Windows;

namespace MayhemApp
{
    /**<summary>
      This class represents the connection between Action and Trigger
    </summary> **/
    [Serializable]
    public class MayhemConnection : ISerializable
    {
        public static List<MayhemConnection> ALL_CONNECTIONS = new List<MayhemConnection>();


        private const string TAG = "[MayhemConnection] : ";
        public MayhemTrigger trigger {get; set;}
        public MayhemAction action { get; set; }
        public RunControl runControl {get; set;}
        public bool ConnectionEnabled = false;

        public static BitmapImage triggerImg = new BitmapImage(new Uri("Images/bluebutton.png", UriKind.Relative)); //(BitmapImage) App.Current.TryFindResource("bluebutton");
        public static BitmapImage actionImg = new BitmapImage(new Uri("Images/redbutton.png", UriKind.Relative));


        public MayhemConnection()
        {
            Debug.WriteLine(TAG + "Added a new Mayhem Connection!!!!!!!!!!");
            MayhemConnection.ALL_CONNECTIONS.Add(this);
        }

        public MayhemConnection(MayhemTrigger t, MayhemAction a ) : this()
        {

            trigger = t;
            t.onTriggerActivated += this.trigger_activated;
            t.associatedConnection = this;
            action = a;
            a.associatedConnection = this;
            ConnectionEnabled = false;

            runControl = new RunControl(this, t, a);

            

        }

        private void trigger_activated(object sender, EventArgs e)
        {
            Debug.WriteLine(TAG + "trigger_activated");

            // animate runcontrol 

            //runControl.onOffCtrl.RunTriggerFiredAnimation();
           
            runControl.onOffCtrl.Dispatcher.BeginInvoke(
                new Action( 
                    delegate()
                    {
                        runControl.onOffCtrl.RunTriggerFiredAnimation();
                    }

                )
                , null);

            // start the associated action

            if (ConnectionEnabled)
                action.PerformAction( (MayhemTrigger) sender);
        }

        /**
         * <summary>
         * Gets called when the on/off switch changes to ON
         * </summary>
         **/
        public void EnableConnection()
        {
            ConnectionEnabled = true;
            Debug.WriteLine(TAG + "EnableConnection");
            trigger.EnableTrigger();
        }

        /**
         * <summary>
         * Gets called when the on/off switch changes to OFF
         * </summary>
         **/
        public void DisableConnection()
        {
            ConnectionEnabled = false;
            Debug.WriteLine(TAG + "DisableConnection");
            trigger.DisableTrigger();
        }







        public MayhemConnection(SerializationInfo info, StreamingContext context) : this()
        {

            Debug.WriteLine("=========================================");
            Debug.WriteLine("Object Types " + info.GetValue("Trigger", typeof(object)).GetType());

            this.trigger =  info.GetValue("Trigger", typeof(object)) as MayhemTrigger;
            this.action =   info.GetValue("Action", typeof(object)) as MayhemAction;
        
            this.ConnectionEnabled = info.GetBoolean("ConnectionEnabled");

            // bind the action and trigger
            this.trigger.onTriggerActivated += this.trigger_activated;
            this.trigger.associatedConnection = this;
            this.action.associatedConnection = this;

           

            

        }


        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
           // throw new NotImplementedException();

            info.AddValue("Trigger", this.trigger);
            info.AddValue("Action", this.action);
            info.AddValue("ConnectionEnabled", this.ConnectionEnabled);

        }
    }

    /**<summary>
     * 
     *  Common properties of Mayhem events and actions
     * 
     * </summary>*/


    public interface IMayhemConnectionItemCommon
    {
        void OnDoubleClick(object sender, MouseEventArgs e);
    }


    /**<summary>
     * A connection item is the base class for the entities representing a connectio between trigger and action
     *  (i.e.) MayhemTrigger, MayhemAction
     * </summary>
     * */
    [Serializable]
    public  class MayhemConnectionItem : ISerializable, IMayhemConnectionItemCommon
    {
       

        //public delegate void Fire(object sender, EventArgs e);
        public MayhemConnection associatedConnection {get; set;}
        public string description;

        // a user control that appears on the lists in the main window
        public MayhemButton userControl;

        public MayhemConnectionItem() { }
        public MayhemConnectionItem(string text) { }

        // a connection Item usually (but not always) has a configuration Window

        public Window setup_window = null;

        

        
        public virtual void OnDoubleClick(object sender, MouseEventArgs e) 
        {
            Debug.WriteLine("[MayhemConnectionItem] OnDoubleClick");
        }

       

        public MayhemConnectionItem(SerializationInfo info, StreamingContext context)
        {
            this.description = info.GetString("Description");
            this.associatedConnection = (MayhemConnection) info.GetValue("AssociatedConnection", typeof(MayhemConnection));
            // UserControl not set!!!
        }

        protected void DimMainWindow(bool dim)
        {
            WindowCollection wc = Application.Current.Windows;
            Debug.WriteLine("Number of current Windows: " + wc.Count);

            MainWindow mainW = null;

            foreach (Window w in wc)
            {
                Debug.WriteLine("Name? " + w.Name);

                if (w.Name == "TheMainWindow")
                {
                    mainW = w as MainWindow;
                }
            }

            if (mainW != null)
            {
                if (dim)
                {
                    mainW.DimRectangle.Visibility = Visibility.Visible;
                }
                else
                {
                    mainW.DimRectangle.Visibility = Visibility.Collapsed;
                }
            }

        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            //throw new NotImplementedException();
            info.AddValue("Description", description);
            info.AddValue("AssociatedConnection", associatedConnection);
        }
    }

    public interface IMayhemTriggerCommon
    {
       // void OnDoubleClick(object sender, MouseEventArgs e);
        void EnableTrigger();
        void DisableTrigger();
    }

    [Serializable]
    public class MayhemTrigger : MayhemConnectionItem, ISerializable, IMayhemTriggerCommon, IMayhemConnectionItemCommon
    {
        /*
         *  This class is a trigger component of a MayhemConnection
         * 
         * */

        //private static string 

        public delegate void triggerActivateHandler(object sender, EventArgs e);
        public virtual event triggerActivateHandler onTriggerActivated;
        public bool triggerEnabled = false;

        
        public MayhemTrigger(string text)
        {
            description = text;
            BitmapImage redImg = new BitmapImage(new Uri("../Images/redbutton.png", UriKind.Relative));
            userControl = new MayhemButton(description, redImg);
            userControl.connectionItem = this;
            userControl.OnDoubleClick += new MayhemButton.DoubleClickHandler(this.OnDoubleClick);

        }


        

        /** <summary>Implement this method to enable the trigger.</summary>
         * 
         **/
        public virtual void EnableTrigger()
        {
            triggerEnabled = true;

        }


        /** <summary>Implement this method do disable the trigger.</summary>
        **/
        public virtual void DisableTrigger()
        {
            triggerEnabled = false;
        }


        public virtual new  void OnDoubleClick(object sender, MouseEventArgs e)
        {
            Debug.WriteLine("[MayhemTrigger] OnDoubleClick");
        }

        #region ISerializable for MayhemTrigger
        public MayhemTrigger(SerializationInfo info, StreamingContext context) : base(info, context) 
        {
            this.onTriggerActivated = (triggerActivateHandler)info.GetValue("TriggerActivateHandler", typeof(triggerActivateHandler));
            this.triggerEnabled = info.GetBoolean("TriggerEnabled");
            BitmapImage redImg = new BitmapImage(new Uri("../Images/redbutton.png", UriKind.Relative));
            this.userControl = new MayhemButton(this.description, redImg);
            userControl.connectionItem = this;
            userControl.OnDoubleClick += new MayhemButton.DoubleClickHandler(this.OnDoubleClick);
        }

        public new void GetObjectData(SerializationInfo info, StreamingContext context) 
        {
            base.GetObjectData(info, context);
            info.AddValue("TriggerActivateHandler", onTriggerActivated);
            info.AddValue("TriggerEnabled", triggerEnabled);
        }
        #endregion 
    }

    [Serializable]
    public class MayhemAction : MayhemConnectionItem, ISerializable, IMayhemConnectionItemCommon
    {
        /*
         * Action component of MayhemConnection
         * 
         * */

       
        protected int ID = 0;

        public MayhemAction(string text)
        {
            description = text;
            BitmapImage blueImg = new BitmapImage(new Uri("../Images/bluebutton.png", UriKind.Relative));
            userControl = new MayhemButton(description, blueImg);
            userControl.connectionItem = this;
            userControl.OnDoubleClick += new MayhemButton.DoubleClickHandler(this.OnDoubleClick);
           
        }


        public virtual void PerformAction(MayhemTrigger sender)
        {
            // performs the "business end" of this Mayhem Action
        }

        public virtual new void OnDoubleClick(object sender, MouseEventArgs e)
        {
            Debug.WriteLine("[MayhemAction] OnDoubleClick");
        }


        public MayhemAction(SerializationInfo info, StreamingContext context) : base(info, context)
        {
            BitmapImage blueImg = new BitmapImage(new Uri("../Images/bluebutton.png", UriKind.Relative));
            this.userControl = new MayhemButton(this.description, blueImg);
            userControl.connectionItem = this;
            userControl.OnDoubleClick += new MayhemButton.DoubleClickHandler(this.OnDoubleClick);

        }

        public new void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);
            //throw new NotImplementedException();
        }
    }
}
