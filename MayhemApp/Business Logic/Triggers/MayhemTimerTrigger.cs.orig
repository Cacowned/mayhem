using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Timers;
using System.Diagnostics;


namespace MayhemApp.Business_Logic.Triggers
{
    [Serializable]
    public class MayhemTimerTrigger: MayhemTrigger
    {
        private const string TAG = "[MayhemTimerTrigger} : ";
        public override event triggerActivateHandler onTriggerActivated;
       
        [NonSerialized]
        private TimerSetupWindow setupWindow;

        private int selected_hours;
        private int selected_mins;
        private int selected_secs;

        [NonSerialized]
        private Timer myTimer = null;
        


        /**<summary>
         * A Base-Compatible Constructor
         * Ignores the input string! 
         * </summary>
         * **/
        public MayhemTimerTrigger(string s)
            : this() { }

        public MayhemTimerTrigger()
            : base("Timer")
        {

            selected_hours = 0;
            selected_mins = 0;
            selected_secs = 1;

            setupWindow = new TimerSetupWindow();
            setupWindow.OnSetButtonClicked += new TimerSetupWindow.SetButtonClickedHandler(setupWindow_OnSetButtonClicked);

            myTimer.Elapsed += new ElapsedEventHandler(myTimer_Elapsed);
            myTimer.Enabled = false;
        }

        private void myTimer_Elapsed(object sender, ElapsedEventArgs e)
        {
            //throw new NotImplementedException();
            if (onTriggerActivated != null)
            {
                onTriggerActivated(this, new EventArgs());
            }
        }

        void setupWindow_OnSetButtonClicked(object sender, System.Windows.RoutedEventArgs e)
        {

            myTimer = new Timer();
            myTimer.Elapsed += new ElapsedEventHandler(myTimer_Elapsed);
            myTimer.Enabled = false;
            selected_hours = setupWindow.selected_hours;
            selected_mins = setupWindow.selected_minutes;
            selected_secs = setupWindow.selected_seconds;

            double interval = (selected_hours * 3600 + selected_mins * 60 + selected_secs)*1000;

            Debug.WriteLine(TAG + "Selected interval" + interval);
            myTimer.Interval = interval ;
 

        }


        public override void OnDoubleClick(object sender, System.Windows.Input.MouseEventArgs e)
        {
            base.OnDoubleClick(sender, e);
            setupWindow.Show();
        }

        public override void EnableTrigger()
        {


            base.EnableTrigger();
            if (myTimer == null)
            {
                myTimer = new Timer();
                myTimer.Elapsed += new ElapsedEventHandler(myTimer_Elapsed);
            }
            myTimer.Enabled = true;
            myTimer.Start();



        }

        public override void DisableTrigger()
        {

            base.DisableTrigger();
            myTimer.Stop();
            myTimer.Enabled = false;
        }


    }
}
