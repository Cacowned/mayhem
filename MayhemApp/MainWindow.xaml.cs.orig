using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Collections.ObjectModel;
using System.Diagnostics;
using MayhemApp.Business_Logic;
using MayhemApp.Business_Logic.Triggers;
using System.Runtime.Serialization;
using MayhemApp.Business_Logic.Actions;
using MayhemOpenCVWrapper;
using MayhemApp.Low_Level;


using System.Windows.Forms;
using System.Threading;
using MayhemApp.Widgets;

// using Twitterizer;

//using oAuthExample;


namespace MayhemApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        ObservableCollection<object> actionList_ = new ObservableCollection<object>();
      
        ObservableCollection<object> triggerList_ = new ObservableCollection<object>();
       
        ObservableCollection<object> runList_ = new ObservableCollection<object>();

        ObservableCollection<object> actionBuilder_ = new ObservableCollection<object>();
        ObservableCollection<object> triggerBuilder_ = new ObservableCollection<object>();



        ///////////////////////////////////////////////// category list controller


        MayhemInterfaceCategoryListController trigger_categories = null;
        MayhemInterfaceCategoryListController action_categories = null;

        /////////////////////////////////////////////



        
        // empty fields for create mahyem bar

        private MayhemButton dragTriggerButton;
        private MayhemButton dragActionButton;

        private MayhemInterfacePaginationController actionListController = new MayhemInterfacePaginationController();
        private MayhemInterfacePaginationController triggerListController = new MayhemInterfacePaginationController();
        private MayhemInterfacePaginationController runListController = new MayhemInterfacePaginationController();



        // Configuration Screen

        private Dialogs.MainConfigDialog mainConfigWindow = new Dialogs.MainConfigDialog();


        public MainWindow()
        {
            InitializeComponent();
            InterceptKeys.Instantiate();


            #region testing

            ///////// MayhemImageUpdater Test

            MayhemImageUpdater.Instance.EnumerateDevices();
            MayhemImageUpdater.Instance.InitCaptureDevice(0, 320, 240);

            ////////////////





            ////////// Media Player Tests

            //MPlayer m = new MPlayer();

           // m.TestPlayFile();
            // MPlayer.instance.TestPlayFile();

         



            ////////////





            // key interceptor, can be used by triggers
            

            /////// Test of InterceptKeys

            //InterceptKeys.OnInterceptKeyDown += new InterceptKeys.KeyDownHandler(InterceptKeys_OnInterceptKeyDown);
            //InterceptKeys.OnInterceptKeyUp += new InterceptKeys.KeyUpHandler(InterceptKeys_OnInterceptKeyUp);

            //////////

            //HookManager.KeyDown += new System.Windows.Forms.KeyEventHandler(HookManager_KeyDown); 

            // HookManager.KeyPress += new KeyPressEventHandler(HookManager_KeyPress);

            #endregion

            


            //actionListController.displayItems = actionList_;
           // triggerListController.displayItems = triggerList_;

            runListController.displayItems = runList_;

            // populate the runlist 
            //runListController.PopulateRunList();

            // runListController.pageLabel = runListLabel;
           // triggerListController.pageLabel = triggerListLabel;
           // actionListController.pageLabel = actionListLabel;

            DragDropHelper.ItemDropped += new EventHandler<DragDropEventArgs>(DragDropHelper_ItemDropped);


            this.configButton.OnButtonClick += new ConfigButton.ButtonClickHandler(configButton_OnButtonClick);


            // add configuration items to config window
            mainConfigWindow.configItemsBox.Items.Add(new CameraConfigItem());
            mainConfigWindow.configItemsBox.Items.Add(new TwitterConfigItem());

            #region action / trigger lists
            trigger_categories = new MayhemInterfaceCategoryListController(triggerList, ta_listNavigationControl,  "Trigger List");
            action_categories = new MayhemInterfaceCategoryListController(actionList, ta_listNavigationControl, "Action List");

            actionList.ItemsSource = action_categories.current_displayItems;
            actionList.DataContext = action_categories;


            triggerList.ItemsSource = trigger_categories.current_displayItems;
            triggerList.DataContext = trigger_categories;
            #endregion

        }

        void InterceptKeys_OnInterceptKeyUp(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            //throw new NotImplementedException();
            Debug.WriteLine(e.KeyCode);
        }

        void InterceptKeys_OnInterceptKeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            //throw new NotImplementedException();
            Debug.WriteLine(e.KeyCode);
        }

        
       
        /**<summary>
         * Configuration Button Clicked
         * </summary>
         */ 
        void configButton_OnButtonClick(object sender, EventArgs e)
        {
            Debug.WriteLine("[MainWindow.xaml] : configuButton clicked");

            mainConfigWindow.Show();

        }

         void DragDropHelper_ItemDropped(object sender, DragDropEventArgs e)
        {
            MayhemButton p = e.Content as MayhemButton;
            if (p == null) return;

             
            if (actionListController.displayItems.Contains(p))
            {
                Debug.WriteLine("DragDropHelper_ItemDropped -- removing from actionList");
                if (actionBuilder_.Contains(dragActionButton))
                {
                    actionList_.Remove(p);
                    actionListController.RemoveItem(p);
                    actionBuilder.IsEnabled = true;
                    actionBuilder_.Remove(dragActionButton);
                    actionBuilder_.Add(p);
                }
            }
                
            else if (actionBuilder_.Contains(p))
            {
        
                Debug.WriteLine("DragDropHelper_ItemDropped -- adding to actionList");
                actionList_.Add(p);
                actionListController.AddItem(p);
                actionBuilder_.Remove(p);
                actionBuilder_.Add(dragActionButton);
                actionBuilder.IsEnabled = false;
            } 

            else if (triggerListController.displayItems.Contains(p))
            {
                Debug.WriteLine("DragDropHelper_ItemDropped -- adding to triggerList");
                if (triggerBuilder_.Contains(dragTriggerButton))
                {
                    triggerList_.Remove(p);
                    triggerListController.RemoveItem(p);
                    triggerBuilder.IsEnabled = true;
                    triggerBuilder_.Remove(dragTriggerButton);
                    triggerBuilder_.Add(p);
                }


            }
             
            else if (triggerBuilder_.Contains(p))
            {
                Debug.WriteLine("DragDropHelper_ItemDropped -- adding to triggerBuilder");
                triggerList_.Add(p);
                triggerListController.AddItem(p);
                triggerBuilder_.Remove(p);
                triggerBuilder_.Add(dragTriggerButton);
                triggerBuilder.IsEnabled = false;

            }

             
        }

         private void Window_Loaded(object sender, RoutedEventArgs e)
         {
             Debug.WriteLine("WINDOW LOADED");

            


             //actionListController.MAX_ITEMS_PER_PAGE = 6;
             //actionListController.userControl = actionList;
            
             //triggerListController.userControl = triggerList;
             //triggerListController.MAX_ITEMS_PER_PAGE = 6;


             runListController.userControl = runList;

             //////// Uncomment to delete settings
             Properties.Settings.Default.RunlistSettings = string.Empty;
             Properties.Settings.Default.Save();
             /////////////////////////

             LoadButtons();


     
         }

         private void LoadButtons()
         {
                                                      
             BitmapImage triggerImg = new BitmapImage(new Uri("Images/bluebutton.png", UriKind.Relative)); //(BitmapImage) App.Current.TryFindResource("bluebutton");
             BitmapImage actionImg = new BitmapImage(new Uri("Images/redbutton.png", UriKind.Relative));

             BitmapImage dragTriggerImg = new BitmapImage(new Uri("../Images/trigger-empty.png", UriKind.Relative));
             BitmapImage dragActionImg = new BitmapImage(new Uri("../Images/action-empty.png", UriKind.Relative));


             LibraryListItem time_category = new LibraryListItem();
             time_category.CategoryImage = triggerImg;
             time_category.Label = "Time";

             LibraryListItem webcam_category = new LibraryListItem();
             webcam_category.CategoryImage = actionImg;
             webcam_category.Label = "Webcam";

             LibraryListItem input_events_category = new LibraryListItem();
             input_events_category.CategoryImage = actionImg;
             input_events_category.Label = "input events";

             //triggerList_.Add(cat_1);
            // triggerList_.Add(cat_2);

             trigger_categories.AddDisplayItem(time_category);
             trigger_categories.AddDisplayItem(webcam_category);
             trigger_categories.AddDisplayItem(input_events_category);


             trigger_categories.AddSubPageToItem(time_category, new MayhemInterfaceItemListPage("Time Triggers"));
             trigger_categories.AddSubPageToItem(webcam_category, new MayhemInterfaceItemListPage("Webcam Triggers"));
             trigger_categories.AddSubPageToItem(input_events_category, new MayhemInterfaceItemListPage("Input Event Triggers"));

             



             
              MayhemTimerTrigger timerTrig = new MayhemTimerTrigger();
              //triggerList_.Add(timerTrig.userControl);

              trigger_categories.current_page.subPages[time_category].Add_Item(timerTrig.userControl);
             


            // MayhemTrigger t2 = new MayhemTrigger("*Outside Temp");
            // triggerListController.AddItem(t2.userControl);

            // MayhemTrigger t3 = new MayhemTrigger("*Twitter Activity");
            // triggerListController.AddItem(t3.userControl);

            // MayhemTrigger t4 = new MayhemTrigger("*Inbox Size");
            // triggerListController.AddItem(t4.userControl);

            // MayhemTrigger t5 = new MayhemTrigger("*Face Detected");
            // triggerListController.AddItem(t5.userControl);

             

            // //some demo actions

            // MayhemAction a = new MayhemAction("*Take Snapshot");
            // actionListController.AddItem(a.userControl);

            // MayhemAction a2 = new MayhemAction("*Run Python Script");
            // actionListController.AddItem(a2.userControl);

            ///* MayhemAction a3 = new MayhemAction("*Play Sound");
            // actionListController.AddItem(a3.userControl); */

            // MayhemAction a4 = new MayhemAction("*Send Text");
            // actionListController.AddItem(a4.userControl);

            //// MayhemAction a5 = new MayhemAction("*Post Tweet");
            //// actionListController.AddItem(a5.userControl);

            // MayhemAction snapshot = new MayhemSnapshotAction();
            // actionListController.AddItem(snapshot.userControl);

            

            // // add keyboard event trigger

            // MayhemUDPTrigger UDPTrigger = new MayhemUDPTrigger();
            // triggerListController.AddItem(UDPTrigger.userControl);
         

            // MayhemKeyboardEventTrigger keyboardTrigger = new MayhemKeyboardEventTrigger();
            // triggerListController.AddItem(keyboardTrigger.userControl);

            // // add timer trigger

            // MayhemTimerTrigger timerTrig = new MayhemTimerTrigger();
            // triggerListController.AddItem(timerTrig.userControl);


            // // add motion trigger
            // MayhemMotionDetectionTrigger motionTrig = new MayhemMotionDetectionTrigger();
            // triggerListController.AddItem(motionTrig.userControl);

            // // add a sample action
            // MayhemDebugAction debugAction = new MayhemDebugAction();
            // actionListController.AddItem(debugAction.userControl);

             

            // // another sample action
            // MayhemDebugPopupAction popupAction = new MayhemDebugPopupAction();
            // actionListController.AddItem(popupAction.userControl);

            // // add twitter action

            // MayhemTweetAction tweetAction = new MayhemTweetAction();
            // actionListController.AddItem(tweetAction.userControl);


            // MayhemPlaySoundAction playSoundAction = new MayhemPlaySoundAction();
            // actionListController.AddItem(playSoundAction.userControl);

           
             

             dragActionButton = new MayhemButton("", dragActionImg);
             actionBuilder_.Add(dragActionButton);


             actionBuilder.ItemsSource = actionBuilder_;
             triggerBuilder.ItemsSource = triggerBuilder_;

            // // add the bitmaps for drag/drop action
           dragTriggerImg = new BitmapImage(new Uri("../Images/trigger-empty.png", UriKind.Relative));
             dragActionImg = new BitmapImage(new Uri("../Images/action-empty.png", UriKind.Relative));

            dragTriggerButton = new MayhemButtonPlaceHolder("", dragTriggerImg);
            triggerBuilder_.Add(dragTriggerButton);
            triggerBuilder.IsEnabled = true;



             dragActionButton = new MayhemButton("", dragActionImg);
             actionBuilder_.Add(dragActionButton);
             actionBuilder.IsEnabled = true;





            // actionBuilder.IsEnabled = false;

             //////// Uncomment to delete settings
             Properties.Settings.Default.RunlistSettings = string.Empty;
             Properties.Settings.Default.Save();
             /////////////////////////


             // populate the runlist

             if (Properties.Settings.Default.RunlistSettings.Length > 0)
             {

                 try
                 {
                     List<MayhemConnection> connections = Business_Logic.Base64Serialize<List<MayhemConnection>>.DeserializeFromString(Properties.Settings.Default.RunlistSettings);

                     Debug.WriteLine("Nr. Of Connections: " + connections.Count);

                     foreach (MayhemConnection c in connections)
                     {


                         MayhemButton tri = c.trigger.userControl;
                         MayhemButton act = c.action.userControl;

                         RunControl r = new RunControl(c, tri, act);
                         
                         runListController.AddItem(r);

                     }
                 }
                 catch (SerializationException e)
                 {
                     Debug.WriteLine(Tag + "(De-)SerializationException " + e);
                 }
             } 
  
         }

         private void createBtnClick(object sender, RoutedEventArgs e)
         {
             // create button clicked --> add an trigger + action to the event list

             Debug.WriteLine("[CreateButton_click]");

             MayhemButton t = (MayhemButton) triggerBuilder_[0];
             MayhemButton a = (MayhemButton) actionBuilder_[0];

             if (t.connectionItem != null && a.connectionItem != null)
             {
                // build action
                 MayhemConnection c = new MayhemConnection((MayhemTrigger) t.connectionItem,
                                                            (MayhemAction) a.connectionItem);

                 RunControl r = c.runControl; //new RunControl(c, t, a);
                 
                 runListController.AddItem(r);
             }



             // TODO implement a controller class for these widgets
             triggerBuilder_.Clear();
             actionBuilder_.Clear();

             // TODO use dynamic resource loading...(let the framework find the right path)  
             BitmapImage dragTriggerImg = new BitmapImage(new Uri("../Images/trigger-empty.png", UriKind.Relative));
             BitmapImage dragActionImg = new BitmapImage(new Uri("../Images/action-empty.png", UriKind.Relative));

             dragTriggerButton = new MayhemButtonPlaceHolder("", dragTriggerImg);
             triggerBuilder_.Add(dragTriggerButton);
             //triggerBuilder.IsEnabled = false;

             dragActionButton = new MayhemButton("", dragActionImg);
             actionBuilder_.Add(dragActionButton);
             //actionBuilder.IsEnabled = false;


             // replace the trigger/action on the respective lists

             Type triggerType = t.connectionItem.GetType();
             var trigger = Activator.CreateInstance(triggerType, new object[]{t.connectionItem.description});

             Type actionType = a.connectionItem.GetType();
             var action = Activator.CreateInstance(actionType, new object[] { t.connectionItem.description });

             // add items to the list controller if they are of the right type
             if (trigger is MayhemTrigger)
             {
                 triggerListController.AddItem(((MayhemTrigger)trigger).userControl);
             }

             if (action is MayhemAction)
             {
                 actionListController.AddItem(((MayhemAction)action).userControl);
             }


         }


         private void btn_runlist_next_Click(object sender, RoutedEventArgs e)
         {
             Trace.WriteLine("btn_runlist_next_Click");
             runListController.ShowNextPage();

             //runListLabel.Content = runListController.GetPagePositionString();

         }

         private void btn_runlist_prev_Click(object sender, RoutedEventArgs e)
         {
             Trace.WriteLine("btn_runlist_prev_Click");
             runListController.ShowPrevPage();

             //runListLabel.Content = runListController.GetPagePositionString();
         }

         private void btn_actionList_next_Click(object sender, RoutedEventArgs e)
         {
             Trace.WriteLine("btn_actionList_next_Click");
             actionListController.ShowNextPage();
         }

         private void btn_actionList_prev_Click(object sender, RoutedEventArgs e)
         {
             Trace.WriteLine("btn_actionList_prev_Click");
             actionListController.ShowPrevPage();
         }

         private void btn_triggerList_next_Click(object sender, RoutedEventArgs e)
         {
             Trace.WriteLine(" btn_triggerList_next_Click");
             triggerListController.ShowNextPage();
         }

         private void btn_triggerList_prev_Click(object sender, RoutedEventArgs e)
         {
             Trace.WriteLine("btn_triggerList_prev_Click");
             triggerListController.ShowPrevPage();
         }

         private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
         {
             // stop the image updater
             MayhemImageUpdater m = MayhemImageUpdater.Instance;
             m.Stop();

             Debug.WriteLine("Saving runListController to Settings file");
           //  runListController.SaveToSettingsFile();
             string serString = Business_Logic.Base64Serialize<List<MayhemConnection>>.SerializeToString(MayhemConnection.ALL_CONNECTIONS);
             Debug.WriteLine("Serialization String " + serString);
             Properties.Settings.Default.RunlistSettings = serString;
             Properties.Settings.Default.Save();



             Debug.WriteLine("Saved runListController to Settings file");
         }

         private void Window_Closed(object sender, EventArgs e)
         {
            
             // shutdown application
             Debug.WriteLine("[MainWindow] : closed and shutting down application");
             System.Windows.Application.Current.Shutdown(0);
         }

    }
}
