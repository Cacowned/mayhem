using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MayhemWpf.UserControls;
using ArduinoModules.Firmata;
using System.Collections.ObjectModel;
using ArduinoModules.Wpf.Helpers;

namespace ArduinoModules.Wpf
{
    /// <summary>
    /// Interaction logic for ArduinoAnalogWriteConfig.xaml
    /// </summary>
    public partial class ArduinoAnalogWriteConfig : WpfConfiguration, IArduinoEventListener
    {

        private ArduinoFirmata arduino = null;

        private ObservableCollection<AnalogWriteItem> pinItems = new ObservableCollection<AnalogWriteItem>();


        public ArduinoAnalogWriteConfig()
        {
            InitializeComponent();
        }

        private void analogPins_AutoGeneratedColumns(object sender, EventArgs e)
        {
            (sender as DataGrid).Visibility = Visibility.Visible;
        }

        public void Arduino_OnInitialized(object sender, EventArgs e)
        {
            throw new NotImplementedException();
        }

        public void Arduino_OnAnalogPinChanged(Pin p)
        {
            throw new NotImplementedException();
        }

        public void Arduino_OnDigitalPinChanged(Pin p)
        {
            throw new NotImplementedException();
        }

        public void Arduino_OnPinAdded(Pin p)
        {
            throw new NotImplementedException();
        }

        private void deviceList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox box = sender as ComboBox;

            if (arduino != null && (string)box.SelectedValue != (string)arduino.PortName)
            {
                connectButton.IsEnabled = true;
            }
            else
            {
                connectButton.IsEnabled = false;
            }
        }

        private void connectButton_Click(object sender, RoutedEventArgs e)
        {
            string portname = (string)deviceList.SelectedValue;

            bool updatePins = false;

            if (arduino != null)
            {
                // clear pin containers and unhook event ghandlers               
                pinItems.Clear();
                arduino.DeregisterListener(this);
            }

            // update pins ? 
            if (ArduinoFirmata.InstanceExists(portname))
                updatePins = true;

            arduino = ArduinoFirmata.InstanceForPortname(portname);
            arduino.RegisterListener(this);

            // update pins if the arduino already exists
            // this makes arduino call the OnPinAdded callbacks, which in turn
            // fill the gridViews with the detected pins 
            if (updatePins)
            {
                // reset analog ids to 0
                AnalogPinItem.ResetAnalogIDs();
                arduino.QueryPins();
            }

            connectButton.IsEnabled = false;
        }

    }
}
