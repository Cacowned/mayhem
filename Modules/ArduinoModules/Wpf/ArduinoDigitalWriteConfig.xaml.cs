using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MayhemDefaultStyles.UserControls;
using System.Collections.ObjectModel;
using ArduinoModules.Wpf.Helpers;
using ArduinoModules.Firmata;
using MayhemSerial;

namespace ArduinoModules.Wpf
{
    /// <summary>
    /// Interaction logic for ArduinoDigitalWriteConfig.xaml
    /// </summary>
    public partial class ArduinoDigitalWriteConfig : IWpfConfiguration, IArduinoEventListener
    {

        private MayhemSerialPortMgr serial = MayhemSerialPortMgr.instance;
        private Dictionary<string, string> deviceNamesIds = null;
        private ArduinoFirmata arduino = null;

        private ObservableCollection<DigitalPinWriteItem> pin_items = new ObservableCollection<DigitalPinWriteItem>(); 
        

        public ArduinoDigitalWriteConfig()
        {
            InitializeComponent();
            Init();
        }

        private void Init()
        {
            digitalPins.ItemsSource = pin_items;
            serial.UpdatePortList();
            deviceNamesIds = serial.getArduinoPortNames();

            if (deviceNamesIds.Count > 0)
            {
                deviceList.ItemsSource = deviceNamesIds;
                deviceList.DisplayMemberPath = "Value";
                deviceList.SelectedValuePath = "Key";
                deviceList.SelectedIndex = 0;
            }
       
        }

        private void connectButton_Click(object sender, RoutedEventArgs e)
        {
            string portname = (string)deviceList.SelectedValue;
            bool update_pins = false;

            if (arduino != null)
            {
                // clear pin containers and unhook event ghandlers               
                pin_items.Clear();
                arduino.DeregisterListener(this);

            }

            // update pins ? 
            if (ArduinoFirmata.InstanceExists(portname))
                update_pins = true;

            arduino = ArduinoFirmata.InstanceForPortname(portname);
            arduino.RegisterListener(this);

            // update pins if the arduino already exists
            // this makes arduino call the OnPinAdded callbacks, which in turn
            // fill the gridViews with the detected pins 
            if (update_pins)
            {
                // reset analog ids to 0
                AnalogPinItem.ResetAnalogIDs();
                arduino.QueryPins();
            }
        }

        private void digitalPins_AutoGeneratedColumns(object sender, EventArgs e)
        {

        }

        public void Arduino_OnInitialized(object sender, EventArgs e)
        {
            throw new NotImplementedException();
        }

        public void Arduino_OnAnalogPinChanged(Pin p)
        {
            throw new NotImplementedException();
        }

        public void Arduino_OnDigitalPinChanged(Pin p)
        {
            throw new NotImplementedException();
        }

        public void Arduino_OnPinAdded(Pin p)
        {
            throw new NotImplementedException();
        }
    }
}
